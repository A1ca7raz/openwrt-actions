name: Build OpenWrt

on:
  workflow_dispatch:
    inputs:
      repo:
        required: true
        default: https://github.com/immortalwrt/immortalwrt
        type: string
      branch:
        required: true
        default: openwrt-24.10
        type: string
      config:
        required: true
        type: string
  workflow_call:
    inputs:
      repo:
        required: true
        type: string
      branch:
        required: true
        type: string
      config:
        required: true
        type: string

env:
  REPO_URL: ${{ inputs.repo }}
  REPO_BRANCH: ${{ inputs.branch }}
  DEPENDENCIES: ${{ github.workspace }}/dependencies-ubuntu.txt
  CUSTOM_FEEDS_SH: ${{ github.workspace }}/custom-feeds.sh
  CUSTOM_PACKAGES_SH: ${{ github.workspace }}/custom-packages.sh
  CUSTOM_CONFIG_SH: ${{ github.workspace }}/custom-config.sh
  # FEEDS_CONFIG:
  CONFIG_FILE: ${{ github.workspace }}/${{ inputs.config }}
  TZ: Asia/Shanghai
  DEVICE_NAME: unknown
  FILE_DATE: unknown

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 0.1 Checkout
      uses: actions/checkout@main

    - name: 0.2 Check inputs
      run: |
        [[ ! -e $CONFIG_FILE ]] && echo "Configuration does not exist!" && exit 123
        true

    - name: 0.3 Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo apt-get -qq update && sudo apt-get -qq upgrade
        # sudo apt-get -qq install $(cat $DEPENDENCIES)
        sudo apt-get -qq autoremove --purge
        sudo apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    # - name: 0.2 Maximize build disk space
    #   uses: easimon/maximize-build-space@master
    #   with:
    #     remove-dotnet: true
    #     remove-android: true
    #     remove-haskell: true
    #     remove-codeql: true
    #     remove-docker-images: true


    - name: 0.4 Clone OpenWRT source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 1.1 Prepare feeds
      run: |
        chmod +x custom_*.sh
        cd openwrt
        $GITHUB_WORKSPACE/custom_feeds.sh
        # [ -e $FEEDS_CONFIG ] && mv $FEEDS_CONFIG feeds.conf.default
        ./scripts/feeds update -a && ./scripts/feeds install -a
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE .config
        $GITHUB_WORKSPACE/custom_config.sh

    - name: 1.2 Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 1.3 Compile the firmware
      id: compile
      run: |
        cd openwrt && echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # - name: 1.2 Build the firmware image
    #   id: compile
    #   run: |
    #     cd openwrt && echo "$(($(nproc)+1)) thread compile"
    #     IGNORE_ERRORS=m make -j$(($(nproc)+1)) defconfig download clean world || IGNORE_ERRORS=m make -j1 defconfig download clean world V=s
    #     echo "status=success" >> $GITHUB_OUTPUT
    #     grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
    #     [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
    #     echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 2.1 Check space usage
      if: (!cancelled())
      run: df -hT

    - name: 2.2 Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success'
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ github.workspace }}/openwrt/bin

    - name: 2.3 Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/* && rm -rf packages
        { echo '### SHA256SUMS'; echo '```txt'; cat sha256sums; echo '```'; } > $GITHUB_WORKSPACE/openwrt/SHA256SUMS
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 2.4 Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success'
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
